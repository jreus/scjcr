<?xml version="1.0" ?>
<!-- Default SC Macros -->
<xml>

<macro name="boot" inputPattern="boot">
<rewritePattern>(
s.options.numInputBusChannels = 10; s.options.numOutputBusChannels = 10;
s.options.memSize = 65536; s.options.blockSize = 256; s.options.numWireBufs = 512;
s.waitForBoot { Syn.load; s.meter };
);</rewritePattern>
<action>{ ServerOptions.devices.postln }</action>
</macro>

<macro name="pdef" inputPattern="pdef">
<rewritePattern>Pdef(\p).play(quant: 1);
Pdef(\p).stop;
(
Pdef(\p, Pbind(*[
    instrument: 'default',
    degree: Pseq([0,2,4,6,8],inf),
    dur: 1,
    amp: 1.0,
    pan: 0,
    out: 0
]
));
);</rewritePattern>
<action></action>
</macro>

<macro name="ndef" inputPattern="ndef">
<rewritePattern>(
Ndef(\x, {arg amp=1.0, pan=0, out=10;
    var sig;
    sig = SinOsc.ar();
    Out.ar(10, Pan2.ar(sig, pan, amp));
}).play;
);</rewritePattern>
<action></action>
</macro>

<macro name="mix" inputPattern="mix">
<rewritePattern>(
Ndef('mix', {|master=1.0|
    var mix, s30, s32, s34, s36, s38;
	s30 = In.ar(30, 2); s32 = In.ar(32, 2); s34 = In.ar(34, 2);
	s36 = In.ar(36, 2); s38 = In.ar(38, 2);

	s30 = GVerb.ar(s30.sum, 100, 0.5, 0.5, 0.1, 25, 1, 0.2, 0.2, mul: 0.2);

	mix = Mix([s30,s32,s34,s36,s38]);
    mix = Limiter.ar(mix, 0.999, 0.001);
    mix = LeakDC.ar(mix);
	mix * master * 1.0;
}).play(out: 0, numChannels: 2);
);</rewritePattern>
<action></action>
</macro>

<macro name="s" inputPattern="s/([A-Za-z0-9_]+)" type="rewrite">
<rewritePattern>Synth('#1#')</rewritePattern>
<action></action>
</macro>

</xml>


<!--
	*addDefaultMacros {
		this.add('boot',
"(
s.options.numInputBusChannels = 10; s.options.numOutputBusChannels = 10;
s.options.memSize = 65536; s.options.blockSize = 256;
s.waitForBoot { Syn.load };
);",
			{
				ServerOptions.devices.postln;
			}
		);
		this.add('reaper',
"
~scRPP = \"\".resolveRelative +/+ \"SuperCollider-Live.RPP\";
(\"open -a Reaper64\"+~scRPP).runInTerminal;
(
s.options.outDevice = \"Soundflower (64ch)\";
s.options.numInputBusChannels = 10; s.options.numOutputBusChannels = 10;
s.options.memSize = 8192 * 2 * 2 * 2; s.options.blockSize = 64 * 2 * 2 * 2;
s.waitForBoot { };
);
"
		);


		this.add('mix',
"(
Ndef('mix', {arg master=1.0;
\tvar mix;
\tvar in1,in2,in3,in4,in5,in6,in7,in8,in9;
\tin1 = In.ar(10, 2); in2 = In.ar(20, 2); in3 = In.ar(30, 2); in4 = In.ar(40, 2); in5 = In.ar(50, 2);
\tin6 = In.ar(60, 2); in7 = In.ar(70, 2); in8 = In.ar(80, 2); in9 = In.ar(90, 2);
\tmix = Mix([in1,in2,in3,in4,in5]);
\tmix = Limiter.ar(mix, 0.999, 0.001);
\tmix = LeakDC.ar(mix);
\tOut.ar(0, mix * master);
}).play;
);"
		);
		this.add('setmix',"Ndef('mix').set('master', 0.0);");
		this.add('pat',
"
Pdef('p01').play(quant: 1);
Pdef('p01').stop;
(
Pdef('p01', Pbind(*[
\tinstrument: 'default',
\tdegree: Pseq([0,2,4,6,8],inf),
\tdur: 1,
\tamp: 1.0,
\tpan: 0,
\tout: 0
]
));
);"
		);
		this.add('pmono',
"
Pdef('p01').play(quant: 1);
Pdef('p01').stop;
(
Pdef('p01', Pmono(*[
\tinstrument: 'default',
\tdegree: Pseq([0,2,4,6,8],inf),
\tdur: 1,
\tamp: 1.0,
\tpan: 0,
\tout: 0
]
));
);"
		);
		this.add('sdef',
"(
SynthDef('xxx', {arg out, amp=1.0, pan=0, freq=440, gate=1, atk=0.1, dec=0.1, sus=0.8, rel=0.1;
	var sig, env;
	env = EnvGen.ar(Env.adsr(atk, dec, sus, rel), gate, doneAction: 2);
	sig = WhiteNoise.ar();
	sig = sig * env;
	Out.ar(out, Pan2.ar(sig, pan, amp));
}).add;
);"
		);
		this.add('ndef',
"(
Ndef('xxx', {arg amp=1.0, pan=0, out=10;
	var sig;
	sig = SinOsc.ar();
	Out.ar(10, Pan2.ar(sig, pan, amp));
}).play;
);"
		);
		this.add('play',
"(
{
	Out.ar(0, SinOsc.ar(1400) * EnvGen.ar(Env.perc, timeScale: 0.1, doneAction: 2));
}.play(s);
);
"
		);
		this.add('eq4',
"
sig = BLowShelf.ar(BPeakEQ.ar(BPeakEQ.ar(BHiShelf.ar(sig, 10000, 1, 0), 4000, 1, 0), 1200, 1, 0), 200, 1, 0);
"
		);

		this.add('start',nil,{arg line;
	var opts,serv;
	serv = Server.default; opts = serv.options;
	opts.numInputBusChannels = 10; opts.numOutputBusChannels = 10;
	opts.memSize = 8192*2*2*2;
	serv.waitForBoot {};
		});


this.add('setmix',"Ndef('mix').set('master', 0.0);");
this.add('pmono',
"
Pdef('p01').play(quant: 1);
Pdef('p01').stop;
(
Pdef('p01', Pmono(*[
\tinstrument: 'default',
\tdegree: Pseq([0,2,4,6,8],inf),
\tdur: 1,
\tamp: 1.0,
\tpan: 0,
\tout: 0
]
));
);"
);
this.add('sdef',
"(
SynthDef('xxx', {arg out, amp=1.0, pan=0, freq=440, gate=1, atk=0.1, dec=0.1, sus=0.8, rel=0.1;
var sig, env;
env = EnvGen.ar(Env.adsr(atk, dec, sus, rel), gate, doneAction: 2);
sig = WhiteNoise.ar();
sig = sig * env;
Out.ar(out, Pan2.ar(sig, pan, amp));
}).add;
);"
);
this.add('play',
"(
{
Out.ar(0, SinOsc.ar(1400) * EnvGen.ar(Env.perc, timeScale: 0.1, doneAction: 2));
}.play(s);
);
"
);
this.add('eq4',
"
sig = BLowShelf.ar(BPeakEQ.ar(BPeakEQ.ar(BHiShelf.ar(sig, 10000, 1, 0), 4000, 1, 0), 1200, 1, 0), 200, 1, 0);
"
);

-->
